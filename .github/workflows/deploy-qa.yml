name: Deploy to QA

on:
  push:
    branches:
      - qa
  workflow_dispatch:

jobs:
  Test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP Action
        uses: shivammathur/setup-php@2.12.0
        with:
          php-version: 8.2.4
          extensions: pdo_sqlite, sqlite3, xdebug

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-
            
      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

      - name: Set Up Environment
        run: |
          mkdir -p storage/framework/views storage/framework/cache
          mkdir -p database
          touch database/database.sqlite
          cp .env.testing .env
          chmod -R 775 storage
          php artisan config:cache
          php artisan cache:clear

      - name: Run Migrations
        run: php artisan migrate --database=sqlite

      - name: Run Tests with Coverage
        run: ./vendor/bin/pest --coverage-html build/coverage

      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: build/coverage

      - name: Create Coverage Report Link
        run: |
          echo "Coverage report available at: [Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY

  Deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_QA_DEPLOYER_PRIVATE_KEY }}

      - name: Deploy to QA Server
        env:
          SSH_USER: ${{ secrets.SSH_DEV_DEPLOYER_USERNAME }}
          SERVER_IP: ${{ secrets.DEV_SERVER_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no -p 50000 $SSH_USER@$SERVER_IP << 'EOF'
            cd /home/support/shoprite_deployment && ansible-playbook -i inventories/qa/hosts --extra-vars "branch=qa env=qa" playbook-code-deploy.yml
          EOF

          