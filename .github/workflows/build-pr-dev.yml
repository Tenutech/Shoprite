ame: Build on PR Development

on:
  pull_request:
    branches:
      - development

jobs:
  Lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP Action
        uses: shivammathur/setup-php@2.12.0
        with:
          php-version: 8.2.4

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Set Up Environment
        run: |
          mkdir -p storage/framework/views storage/framework/cache
          mkdir -p database
          touch database/database.sqlite
          cp .env.testing .env
          chmod -R 775 storage

      - name: Install dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Determine if linting is required
        id: linting-required
        uses: tj-actions/changed-files@v29.0.3
        with:
          files: |
            app/**/*.php
            config/**/*.php

      - name: Set output using environment files
        run: echo "LINTING_REQUIRED=true" >> $GITHUB_ENV

      - name: PHP Lint Check
        if: env.LINTING_REQUIRED == 'true'
        run: composer run lint

      # - name: PSR2 Code Sniffer
      #   if: env.LINTING_REQUIRED == 'true'
      #   run: composer run style

  Test:
    runs-on: ubuntu-latest
    needs: Lint

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP Action
        uses: shivammathur/setup-php@2.12.0
        with:
          php-version: 8.2.4
          extensions: pdo_sqlite, sqlite3, xdebug

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Set Up Environment
        run: |
          mkdir -p storage/framework/views storage/framework/cache
          mkdir -p database
          touch database/database.sqlite
          cp .env.testing .env
          chmod -R 775 storage
          php artisan config:cache
          php artisan cache:clear

      - name: Run Migrations
        run: php artisan migrate --database=sqlite

      - name: Run Tests with Coverage
        run: ./vendor/bin/pest --coverage-html build/coverage

      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: build/coverage

      - name: Create Coverage Report Link
        run: |
          echo "Coverage report available at: [Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY